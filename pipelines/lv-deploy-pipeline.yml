# Deploy CD template for Level Flight Status Web

resources:
  pipelines:
    # The main pipeline with the code to be deployed
    - pipeline: Main
      # Replace with project
      project: FlyLevel
      # Replace with the pipeline source that generate the artifacts that you want to deploy
      source: LV.UI.Flight.Status.Web - CI
      trigger: none
    # Pipeline that contains al ARM templates and script for provision resources
    - pipeline: ARM
      project: AirPricing
      source: "AirPricing.ARM - CI"
      trigger: none

  repositories:
    - repository: templates
      type: git
      name: AirPricing/AirPricing.Pipelines
      ref: refs/heads/legacy

trigger: none

parameters:
  - name: EnableARMProvisioning
    displayName: Enable provisioning?
    type: boolean
    default: false

# Pipeline variables, those variables are accesible for the entire Pipeline
variables:
  - template: /lv/lv-deploy-pipeline-variables.yml@templates
  - name: ResourceGroup
    value: UI-FLIGHT-STATUS
  - name: HostingPlanName
    value: LVUIFlightStatusDev
  - name: AppName
    value: UIFlightStatusWeb
  - name: EnableARMDeployments
    value: ${{ parameters.EnableARMProvisioning }}
  - name: SiteClientAffinityEnabled
    value: true
  - name: SiteWebSocketsEnabled
    value: true

stages:
  - stage: DEV
    displayName: "DEV"
    variables:
      - name: AppSettings
        # Replace with the app settings variable list
        value: >
          -APPINSIGHTS_INSTRUMENTATIONKEY $(APPINSIGHTS_INSTRUMENTATIONKEY)

      # Specific pipeline variable groups:
      - group: "DEV Environment"
      - group: "UIFlightStatusWeb - Settings - DEV"
      - group: "UIFlightStatusWeb - Application Insights - DEV"
      - group: "FlightStatusApi - Client Settings - DEV"

    jobs:
      - deployment: PROVISIONING
        displayName: "RESOURCES PROVISIONING"
        pool: Default
        workspace:
          clean: all
        environment: DEV
        strategy:
          runOnce:
            deploy:
              steps:
                - download: ARM
                  condition: eq(variables.EnableARMDeployments, true)
                  # Provision without slot
                - task: AzureResourceGroupDeployment@2
                  displayName: "Provision Azure Web App $(ReleaseWebAppName)"
                  condition: and(eq(variables.EnableARMDeployments, true), eq('', ''))
                  inputs:
                    azureSubscription: "Level-eCommerce-Dev"
                    resourceGroupName: "$(ReleaseResourceGroup)"
                    location: "westeurope"
                    csmFile: "pipelines/serviceplan-webapp.json"
                    overrideParameters: >
                      -AppServiceSKUName $(AppServiceSKUName) -AppServiceName $(ReleaseHostingPlanName) -SiteName $(ReleaseWebAppName) -ConfigName $(ReleaseWebAppName)/web -ClientAffinityEnabled $(SiteClientAffinityEnabled) -WebSocketsEnabled $(SiteWebSocketsEnabled)

      - deployment: DEPLOYING
        dependsOn: PROVISIONING
        displayName: "DEPLOYING"
        pool: Default
        workspace:
          clean: all
        environment: DEV
        strategy:
          runOnce:
            deploy:
              steps:
                - download: Main
                  artifact: flight-status-build-artifact
                # Deploy web app
                - task: AzureRmWebAppDeployment@4
                  condition: eq('', '')
                  displayName: "Azure Web App Deploy: $(ReleaseWebAppName)"
                  inputs:
                    azureSubscription: "Level-eCommerce-Dev"
                    WebAppName: $(ReleaseWebAppName)
                    packageForLinux: "$(Pipeline.Workspace)/**/flight-status-build-artifact/*.zip"
                    AppSettings: >
                      -NODE_ENV $(NODE_ENV) -APPINSIGHTS_INSTRUMENTATIONKEY $(APPINSIGHTS_INSTRUMENTATIONKEY) $(AppSettings) -ENVIRONMENT $(Environment)

  - stage: SBX
    displayName: "SBX"
    dependsOn: [DEV]
    condition: succeeded('DEV')
    variables:
      - name: AppSettings
        # Replace with the app settings variable list
        value: >
          -APPINSIGHTS_INSTRUMENTATIONKEY $(APPINSIGHTS_INSTRUMENTATIONKEY)

      # Specific pipeline variable groups:
      - group: "SBX Environment"
      - group: "UIFlightStatusWeb - Settings - SBX"
      - group: "UIFlightStatusWeb - Application Insights - SBX"
      - group: "FlightStatusApi - Client Settings - SBX"

    jobs:
      - deployment: PROVISIONING
        displayName: "RESOURCES PROVISIONING"
        pool: Default
        workspace:
          clean: all
        environment: SBX
        strategy:
          runOnce:
            deploy:
              steps:
                - download: ARM
                  condition: eq(variables.EnableARMDeployments, true)
                  # Provision without slot
                - task: AzureResourceGroupDeployment@2
                  displayName: "Provision Azure Web App $(ReleaseWebAppName)"
                  condition: and(eq(variables.EnableARMDeployments, true), eq('', ''))
                  inputs:
                    azureSubscription: "Level-eCommerce-SBX"
                    resourceGroupName: "$(ReleaseResourceGroup)"
                    location: "westeurope"
                    csmFile: "pipelines/serviceplan-webapp.json"
                    overrideParameters: >
                      -AppServiceSKUName $(AppServiceSKUName) -AppServiceName $(ReleaseHostingPlanName) -SiteName $(ReleaseWebAppName) -ConfigName $(ReleaseWebAppName)/web -ClientAffinityEnabled $(SiteClientAffinityEnabled) -WebSocketsEnabled $(SiteWebSocketsEnabled)

      - deployment: DEPLOYING
        dependsOn: PROVISIONING
        displayName: "DEPLOYING"
        pool: Default
        workspace:
          clean: all
        environment: SBX
        strategy:
          runOnce:
            deploy:
              steps:
                - download: Main
                  artifact: flight-status-build-artifact
                # Deploy web app
                - task: AzureRmWebAppDeployment@4
                  condition: eq('', '')
                  displayName: "Azure Web App Deploy: $(ReleaseWebAppName)"
                  inputs:
                    azureSubscription: "Level-eCommerce-SBX"
                    WebAppName: $(ReleaseWebAppName)
                    packageForLinux: "$(Pipeline.Workspace)/**/flight-status-build-artifact/*.zip"
                    AppSettings: >
                      -NODE_ENV $(NODE_ENV) -APPINSIGHTS_INSTRUMENTATIONKEY $(APPINSIGHTS_INSTRUMENTATIONKEY) $(AppSettings) -ENVIRONMENT $(Environment)
  - stage: PRO
    displayName: "PRO"
    dependsOn: [DEV, SBX]
    condition: and(succeeded('DEV'), succeeded('SBX'))
    variables:
      - name: AppSettings
        # Replace with the app settings variable list
        value: >
          -APPINSIGHTS_INSTRUMENTATIONKEY $(APPINSIGHTS_INSTRUMENTATIONKEY)

      # Specific pipeline variable groups:
      - group: "PRO Environment"
      - group: "UIFlightStatusWeb - Settings - PRO"
      - group: "UIFlightStatusWeb - Application Insights - PRO"
      - group: "FlightStatusApi - Client Settings - PRO"

    jobs:
      - deployment: PROVISIONING
        displayName: "RESOURCES PROVISIONING"
        environment: PRO
        pool: Default
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - download: ARM
                  condition: eq(variables.EnableARMDeployments, true)
                # Provision without slot
                - task: AzureResourceGroupDeployment@2
                  displayName: "Provision Azure Web App $(ReleaseWebAppName)"
                  condition: and(eq(variables.EnableARMDeployments, true), eq('', ''))
                  inputs:
                    azureSubscription: "Level-eCommerce-Prod"
                    resourceGroupName: "$(ReleaseResourceGroup)"
                    location: "westeurope"
                    csmFile: "pipelines/serviceplan-webapp.json"
                    overrideParameters: >
                      -AppServiceSKUName "S1" -AppServiceName $(ReleaseHostingPlanName) -SiteName $(ReleaseWebAppName) -ConfigName $(ReleaseWebAppName)/web -ClientAffinityEnabled $(SiteClientAffinityEnabled) -WebSocketsEnabled $(SiteWebSocketsEnabled)
                # Provision slot if it doesn't exist
                - task: AzureCLI@2
                  displayName: "Create Slot if not exists"
                  condition: and(eq(variables.EnableARMDeployments, true), eq('', ''))
                  inputs:
                    azureSubscription: "Level-eCommerce-Prod"
                    scriptType: "ps"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az webapp deployment slot create --name $(ReleaseWebAppName) --resource-group $(ReleaseResourceGroup) --slot staging --configuration-source $(ReleaseWebAppName)

      - deployment: DEPLOYING
        dependsOn: PROVISIONING
        displayName: "DEPLOYING"
        pool: Default
        workspace:
          clean: all
        environment: PRO
        strategy:
          runOnce:
            deploy:
              steps:
                - download: Main
                  artifact: flight-status-build-artifact
                # Deploy web app
                - task: AzureRmWebAppDeployment@4
                  displayName: "Azure Web App Deploy: $(ReleaseWebAppName)"
                  inputs:
                    azureSubscription: "Level-eCommerce-Prod"
                    WebAppName: "$(ReleaseWebAppName)"
                    deployToSlotOrASE: true
                    SlotName: "staging"
                    ResourceGroupName: "$(ReleaseResourceGroup)"
                    packageForLinux: "$(Pipeline.Workspace)/**/flight-status-build-artifact/*.zip"
                    AppSettings: >
                      -NODE_ENV $(NODE_ENV) -APPINSIGHTS_INSTRUMENTATIONKEY $(APPINSIGHTS_INSTRUMENTATIONKEY) $(AppSettings) -ENVIRONMENT $(Environment)
                # Swap slots
                - task: AzureAppServiceManage@0
                  displayName: "Swap Slots"
                  inputs:
                    azureSubscription: "Level-eCommerce-Prod"
                    WebAppName: $(ReleaseWebAppName)
                    ResourceGroupName: $(ReleaseResourceGroup)
                    SourceSlot: "staging"
                    SwapWithProduction: true
